// 编译脚本
buildscript {
    ext {
        // https://start.spring.io/actuator/info
        springBootVersion = "2.5.5"
    }

    // 仓库配置
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/spring' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://repo.spring.io/release' }
        maven { url 'https://repo.spring.io/milestone' }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

description = "爱组搭低代码组件化开发平台"

// 项目配置
allprojects {
    group "com.aizuda"
    version VERSION
}

// 子模块配置
subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: "io.spring.dependency-management"

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.warnings = false
    }

    // 仓库配置
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/spring' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://repo.spring.io/release' }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }

    // 依赖管理
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }

        dependencies {
            // 单点登录
            dependency("com.baomidou:kisso:3.8.0")

        }
    }

    // 依赖配置
    dependencies {
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")
        testAnnotationProcessor("org.projectlombok:lombok")
        testCompileOnly("org.projectlombok:lombok")

        compileOnly("javax.servlet:javax.servlet-api")
        testImplementation("javax.servlet:javax.servlet-api")

        // 编译测试
        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation("javax.servlet:javax.servlet-api")
    }

    // 编译环境 JDK1.8
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    javadoc {
        options {
            encoding "UTF-8"
            charSet 'UTF-8'
            author true
            version true
            failOnError false
            links "http://docs.oracle.com/javase/7/docs/api"
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        repositories {
            maven {
                def userName = System.getProperty("un")
                def passWord = System.getProperty("ps")
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username userName
                    password passWord
                }
            }
        }
        publications {

            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'aizuda-components'
                    packaging 'jar'
                    description = 'aizuda components.'
                    url = 'https://github.com/aizuda/aizuda-components'

                    scm {
                        connection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
                        developerConnection = 'scm:git@github.com:Codearte/gradle-nexus-staging-plugin.git'
                        url = 'https://github.com/aizuda/aizuda-components'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'aizuda'
                            name = 'hubin'
                            email = 'jobob@qq.com'
                        }
                    }

                    withXml {
                        def root = asNode()
                        root.dependencies.'*'.findAll {
                            def d = it
                            d.scope.text() == 'runtime' && project.configurations.findByName("implementation").allDependencies.find { dep ->
                                dep.name == it.artifactId.text()
                            }.each() {
                                d.scope*.value = 'compile'
                                d.appendNode('optional', true)
                            }
                        }
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenJava
        }
    }
}